--> 4

data rec
  TreeT [A] = EmptyT | NodeT A (Forest [A])
and
  Forest [A] = NilF | ConsF (TreeT [A]) (Forest [A]) in

let rec
  count_nil_tree [A] (x:TreeT[A]):Int =
    case x of
       EmptyT -> 0
     | NodeT x xs -> count_nil_forest [A] xs
and
  count_nil_forest [A] (x:Forest[A]):Int =
    case x of
       NilF -> 1
     | ConsF x y -> (count_nil_tree [A] x) + (count_nil_forest [A] y) in

let test = ConsF [Int]
     (NodeT [Int] 1
                 (ConsF [Int] (NodeT [Int] 2 (NilF [Int]))
                              (NilF [Int])))
     (ConsF [Int] (NodeT [Int] 3
                               (NilF [Int]))
                  (NilF [Int])) in
count_nil_forest [Int] test
