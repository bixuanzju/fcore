-- List definition

data PolyList [A] = Nil
                  | Cons A (PolyList[A]) in

-- String definition

type PolyString = PolyList[Char] in

-- Parser type definition

type Parser [A] = PolyString -> PolyList[(A, PolyString)] in

-- Utilities

let singleton [A] (x : A) : PolyList[A] =
    Cons[A] x (Nil[A]) in

let rec map [A, B] (f : A -> B) (l : PolyList[A]) : PolyList[B] =
    case l of
        Nil             ->      Nil[B]
     |  Cons x xs       ->      Cons[B] (f x) (map [A, B] f xs) in

let rec concat2 [A] (a : PolyList[A]) (b : PolyList[A]) : PolyList[A] =
    case a of
        Nil         ->  b
      | Cons x xs   ->  Cons[A] x (concat2[A] xs b) in

let rec concat [A] (l : PolyList[PolyList[A]]) : PolyList[A] =
    case l of
        Nil         ->  Nil[A]
     |  Cons x xs   ->  concat2[A] x (concat[A] xs) in

-- Primitive Parsers

let result [V] (value : V) : Parser[V] =
    \(inp : PolyString) -> singleton [(V, PolyString)] (value, inp) in

let zero [V] : Parser[V] =
    \(inp : PolyString) -> Nil[(V, PolyString)] in

let item : Parser[Char] =
    \(inp : PolyString) ->
        case inp of
            Nil         ->      Nil[(Char, PolyString)]
          | Cons c xs   ->      singleton [(Char, PolyString)] (c, xs) in


-- Combinators

let bind [A, B] (p : Parser[A]) (f : A -> Parser[B]) : Parser[B] =
    \(inp : PolyString) ->
        concat [(B, PolyString)]
               (map [(A, PolyString), PolyList[(B, PolyString)]]
                    (\(v : (A, PolyString)) -> f v._1 v._2) (p inp)) in

let sat (f : Char -> Bool) : Parser[Char] =
    bind [Char, Char] item (\(x : Char) -> if f x then (result [Char] x) else zero [Char]) in

let upper : Parser[Char] =
    sat (\(x : Char) -> 'A' <= x && x <= 'Z') in

let lower : Parser[Char] =
    sat (\(x : Char) -> 'a' <= x && x <= 'z') in

let plus [A] (p : Parser[A]) (q : Parser[A]) : Parser[A] =
    \(inp : PolyString) ->
        concat2 [(A, PolyString)] (p inp) (q inp) in

let letter : Parser[Char] =
    plus [Char] lower upper in

let rec word : Parser[PolyString] =
    (let nWord = bind [Char, PolyString] letter (\(x : Char) ->
                 bind [PolyString, PolyString] word (\(xs : PolyString) ->
                 result [PolyString] (Cons[Char] x xs))) in plus [PolyString] nWord (zero [PolyString])) in

Nil[Char]
