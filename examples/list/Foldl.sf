let rec
  foldl [A, B] (f:B->A->B) (x:B) (xs:List[A]) : B =
    if(null [A] xs)
    then x
    else foldl [A, B] f (f x (head [A] xs)) (tail [A] xs) in

let f(x:Int) (y:Int): Int = x+ y in

foldl [Int, Int] f 0 L[-1,0,1,2,3]
