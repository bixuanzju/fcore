-- OA with OO-like interfaces (IEval, IPrint)

type IEval  = { eval : Int };
type IPrint = { print : String };
type ExpAlg[E] = { lit : Int -> E, add : E -> E -> E };
let evalAlg = {
  lit = \(x : Int) -> { eval = x },
  add = \(x : { eval : Int }) (y : { eval : Int }) -> { eval = x.eval + y.eval }
} in
type SubExpAlg[E] = (ExpAlg[E]) & { sub : E -> E -> E };
let subEvalAlg = evalAlg ,, { sub = \(x : { eval : Int }) (y : { eval : Int }) -> { eval = x.eval - y.eval } } in
let printAlg = {
  lit = \(x : Int) -> { print = x.toString() },
  add = \(x : { print : String }) (y : { print : String }) -> { print = "\{x.print} + \{y.print}" },
  sub = \(x : { print : String }) (y : { print : String }) -> { print = "\{x.print} - \{y.print}" }
} in
let merge[A, B] (f : ExpAlg[A]) (g : ExpAlg[B]) = {
  lit = \(x : Int) -> f.lit x ,, g.lit x,
  add = \(x : A & B) (y : A & B) -> f.add x y ,, g.add x y
} in
let exp1[E] (f : ExpAlg[E])    = f.add (f.lit 6) (f.lit 6) in
let exp2[E] (f : SubExpAlg[E]) = f.sub (exp1[E] f) (f.lit 2) in
let newAlg = merge [{ eval : Int }, { print : String }] subEvalAlg printAlg in
(exp1 [{ eval : Int } & { print : String }] newAlg).print
