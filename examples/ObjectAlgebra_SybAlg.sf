type ListAlg [A, L] = {
  nil : L,
  con : A -> L -> L
};
type MyList [A] = {
  accept : forall L. ListAlg[A, L] -> L
};
let sumListAlg : ListAlg[Int, Int] = {
  nil = 0,
  con = \(x : Int) (y : Int) -> x + y
} in
let sumList (l : MyList[Int]) : Int =
  l.accept [Int] sumListAlg in
type SybAlg[Company, Dept, SubUnit, Employee, Person, Salary] = {
  goC  : MyList[Dept] ->  Company,
  goD  : String       ->  Employee  ->  MyList[SubUnit] ->  Dept,
  goPU : Employee     ->  SubUnit,
  goDU : Dept         ->  SubUnit,
  goE  : Person       ->  Salary    ->  Employee,
  goP  : String       ->  String    ->  Person,
  goS  : Int          ->  Salary
};
let genCom [C, D, SU, E, P, SA] (alg : SybAlg[C, D, SU, E, P, SA]) : C =
  alg.goC
   { accept = /\L -> \ (f : ListAlg[D, L]) -> f.con
    (alg.goD "Research" (alg.goE (alg.goP "Ralf"  "Amsterdam") (alg.goS 8000))
      { accept = /\ LM -> \ (fm : ListAlg[SU, LM]) -> fm.con
        (alg.goPU (alg.goE (alg.goP "Joost"  "Amsterdam") (alg.goS 1000)))
        (fm.con
         alg.goPU (alg.goE (alg.goP "Marlow" "Cambridge") (alg.goS 2000)) fm.nil) }
    )
    (f.con
        (alg.goD "Strategy" (alg.goE (alg.goP "Blair" "London") (alg.goS 100000))
      { accept = /\ LN -> \ (fn : ListAlg[SU, LN]) -> fn.nil }) f.nil
    ) } in
type QueryInt = SybAlg[Int, Int, Int, Int, Int, Int];
let salaryBill : QueryInt = {
  goC  = \(l : MyList[Int]) -> sumList l,
  goD  = \(x : String) (y : Int) (l : MyList[Int]) -> y + sumList l,
  goPU = \(x : Int) -> x,
  goDU = \(x : Int) -> x,
  goE  = \(x : Int) (y : Int) -> x + y,
  goP  = \(x : String) (y : String) -> 0,
  goS  = \(x : Int) -> x
} in
let incSalary[C, D, SU, E, P, SA] (alg : SybAlg[C, D, SU, E, P, SA]) : SybAlg[C, D, SU, E, P, SA] = {
  goC  = \(l : MyList[D]) -> alg.goC l,
  goD  = \(x : String) (y : E) (l : MyList[SU]) -> alg.goD x y l,
  goPU = \(x : E) -> alg.goPU x,
  goDU = \(x : D) -> alg.goDU x,
  goE  = \(x : P) (y : SA) -> alg.goE x y,
  goP  = \(x : String) (y : String) -> alg.goP x y,
  goS  = \(x : Int) -> alg.goS (2 * x)
} in
let before = genCom [Int, Int, Int, Int, Int, Int] salaryBill in
let after  = genCom [Int, Int, Int, Int, Int, Int]
             (incSalary [Int, Int, Int, Int, Int, Int] salaryBill) in
"before = \{before}, after = \{after}"
