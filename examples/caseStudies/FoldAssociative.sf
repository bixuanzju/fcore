data PList = Nil | Cons Int PList;

data Option = None | Some Int;

let rec foldRight [A] (xs : PList) (v : A) (f : A -> Int -> A) : A =
    case xs of
         Nil -> v
       | Cons h t -> let tailv = foldRight [A] t v f in f tailv h in

let rec take (l: PList) (co: Int) : PList =
      if co >= 0
       then case l of
               Cons h t -> (if co > 0 then Cons h (take t (co - 1))
                                      else Nil) --error [PList] "")
             | Nil      -> Nil
       else Nil in --error [PList] "the counter should be at least 0" in

let rec drop (l: PList) (co: Int): PList =
    if co >= 0
     then case l of
            Cons h t -> if co > 0 then drop t (co - 1) else Nil --error [PList] "ahaa"
          | Nil      -> l
     else Nil in --error [PList] "the counter should be at least 0" in

let rec append (l1: PList) (l2: PList) : PList =
       case l1 of
           Cons h t -> Cons h (append t l2)
         | Nil      -> l2 in

let lemma_split (l: PList) (x: Int) : Bool =
    if x >= 0
     then let f  = (\(x: Int) (s: Int) -> x + s) in
          let l1 = take l x in
          let l2 = drop l x in
          foldRight [Int] l 0 f == foldRight [Int] l1 (foldRight [Int] l2 0 f) f
     else False in --error [Bool] "x should be larger than 0" in

let rec prop_lemma_split_induct (l: PList) (x: Int) : Bool =
       if x >=0
       then let f  = (\(x: Int) (s: Int) -> x + s) in
            let l1 = take l x in
            let l2 = drop l x in
            lemma_split l x && (case l of
                                 Cons h t -> (if x > 0 then prop_lemma_split_induct t (x - 1)
                                                       else True)
                               | Nil      -> True )
       else True in

let lemma_reassociative (l: PList) (x: Int) : Bool =
    if x >= 0
     then let f  = (\(x: Int) (s: Int) -> x + s) in
          let l1 = take l x in
          let l2 = drop l x in
          foldRight [Int] l 0 f == (foldRight [Int] l1 0 f) + (foldRight [Int] l2 0 f)
     else False in --error [Bool] "x should be larger than 0" in

let rec prop_lemma_reassociative_induct (l: PList) (x: Int) : Bool =
     if x >=0
     then let f  = (\(x: Int) (s: Int) -> x + s) in
          let l1 = take l x in
          let l2 = drop l x in
          lemma_reassociative l x && (case l of
                                  Cons h t -> (if x > 0
                                               then prop_lemma_reassociative_induct t (x - 1)
                                               else True)
                                | Nil      -> True )
     else True in


let lemma_reassociative_presplit (l1: PList) (l2: PList) : Bool =
   let f  = (\(x: Int) (s: Int) -> x + s) in
   let l = append l1 l2 in
   foldRight [Int] l 0 f == (foldRight [Int] l1 0 f) + (foldRight [Int] l2 0 f) in

let rec prop_lemma_reassociative_presplit_induct (l1: PList) (l2: PList) : Bool =
    let f  = (\(x: Int) (s: Int) -> x + s) in
    let l = append l1 l2 in
    lemma_reassociative_presplit l1 l2 && ( case l1 of
                                              Cons h t ->
                                               prop_lemma_reassociative_presplit_induct t l2
                                            | Nil      -> True) in


--prop_lemma_reassociative_induct
--prop_lemma_split_induct
prop_lemma_reassociative_presplit_induct
