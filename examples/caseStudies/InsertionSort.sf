
data PList = Nil | Cons Int PList in

data OptInt = None | Some Int in

let rec size (l : PList) : Int =
       case l of
          Nil       -> 0
        | Cons _ xs -> 1 + size xs in

let rec isSorted(l: PList): Bool =
       case l of
           Nil       -> True
         | Cons x ll -> (case ll of
                           Nil       -> True
                         | Cons y ys -> x <= y && isSorted (Cons y ys)) in


let rec sortedIns(e: Int) (l: PList): PList =
       if isSorted l
        then case l of
             Nil       -> Cons e Nil
           | Cons x xs -> if x <= e then Cons x (sortedIns e xs) else Cons e l
        else Nil in --error [PList] "the input PList is not sorted." in


let prop_sortedIns (e: Int) (l: PList): Bool =
      if isSorted l
       then let res = sortedIns e l in
          --  content res == union (content l) (singleton e) &&
            isSorted res &&
            size res == size l + 1
       else True in

let buggySortedIns (e: Int) (l: PList): PList =
         case l of
             Nil       -> Cons e Nil
           | Cons x xs -> if x <= e then Cons x (sortedIns e xs) else Cons e l in

let prop_buggySortedIns (e: Int) (l: PList): Bool =
      let res = sortedIns e l in
         --   content res == union (content l) (singleton e) &&
            isSorted res &&
            size res == size l + 1 in

let rec sort(l: PList): PList =
       case l of
          Nil       -> Nil
        | Cons x xs -> sortedIns x (sort xs) in

let prop_sort(l: PList): Bool =
     let res = sort l in
          --  content res == content l &&
            isSorted res &&
            size res == size l in

let rec mergeInto(l1: PList) (l2: PList) : PList =
      if isSorted l2
       then case l1 of
               Nil -> l2
             | Cons x xs -> mergeInto xs (sortedIns x l2)
       else Nil in --error [PList] "PList2 is not sorted." in

let prop_mergeInto(l1: PList) (l2: PList) : Bool =
      if isSorted l2
       then  --content (mergeInto l1 l2) == union (content l1) (content l2) &&
             isSorted (mergeInto l1 l2)
       else True in



--prop_sortedIns
--prop_buggySortedIns
--prop_sort
prop_mergeInto
