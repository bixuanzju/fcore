data PolyList [A] = Nil
                  | Cons A (PolyList[A])
            ;
let rec append [A] (xs : PolyList[A]) (ys : PolyList[A]) : PolyList[A] =
    case xs of
       Nil       -> ys
     | Cons z zs -> Cons [A] z (append [A] zs ys) in
let rec list_length [A] (xs : PolyList[A]) : Int =
    case xs of
        Nil       -> 0
      | Cons _ ys -> 1 + list_length [A] ys in
let prop_append [A] (xs : PolyList[A]) (ys : PolyList[A]) =
    list_length [A] xs + list_length [A] ys ==  list_length [A] (append [A] xs ys) in
prop_append
