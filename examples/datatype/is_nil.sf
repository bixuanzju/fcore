data PolyList [A] = Nil
                | Cons A (PolyList[A]) in
let null [A] (xs: PolyList[A]): Bool =
    case xs of
       Nil -> True
     | Cons y ys -> False in
type IntList = PolyList[Int] in
let headIs0 (xs : IntList) : Bool =
   case xs of
       Nil -> if null [Int] xs
              then False
              else True -- unreachable
     | Cons y ys -> if null [Int] xs
                    then True -- unreachable
                    else y == 0 in
-- headIs0 (Cons [Int] 0 (Nil [Int]))
headIs0
