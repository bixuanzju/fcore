data PolyList [A] = Nil
                | Cons A (PolyList[A])
           in
let rec concat [A] (xs : PolyList[A]) (ys : PolyList[A]) : PolyList[A] =
    case xs of
        Nil       -> ys
      | Cons z zs -> Cons [A] z (concat [A] zs ys) in

let rec isPrefix [A] (xs : PolyList[A]) (ys : PolyList[A]) : Bool =
    case xs of
      Nil -> True
      | Cons a as -> (case ys of
                         Nil -> False
       | Cons b bs -> a == b && isPrefix [A] as bs) in
let prop_isPrefix [A] (xs : PolyList[A]) (ys : PolyList[A]) = isPrefix [A] xs (concat [A] xs ys) in
prop_isPrefix
