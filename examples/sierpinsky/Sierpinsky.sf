let dist : Int = 8 and level = 4 in
let rec
    sierpA (level : Int) : Bool =
        if level > 0 then {
            sierpA (level - 1);
            lib.DrawFrame.lineTo(dist, dist);
            sierpB (level - 1);
            lib.DrawFrame.lineTo(2 * dist, 0);
            sierpD (level - 1);
            lib.DrawFrame.lineTo(dist, 0 - dist);
            sierpA (level - 1);
            True
        }
        else False
and
    sierpB (level : Int) : Bool =
        if level > 0 then {
            sierpB (level - 1);
            lib.DrawFrame.lineTo(0 - dist, dist);
            sierpC (level - 1);
            lib.DrawFrame.lineTo(0, 2 * dist);
            sierpA (level - 1);
            lib.DrawFrame.lineTo(dist, dist);
            sierpB (level - 1);
            True
        }
        else False
and
    sierpC (level : Int) : Bool =
        if level > 0 then {
            sierpC (level - 1);
            lib.DrawFrame.lineTo(0 - dist, 0 - dist);
            sierpD (level - 1);
            lib.DrawFrame.lineTo(0 - 2 * dist, 0);
            sierpB (level - 1);
            lib.DrawFrame.lineTo(0 - dist, dist);
            sierpC (level - 1);
            True
        }
        else False
and
    sierpD (level : Int) : Bool =
        if level > 0 then {
            sierpD (level - 1);
            lib.DrawFrame.lineTo(dist, 0 - dist);
            sierpA (level - 1);
            lib.DrawFrame.lineTo(0, 0 - 2 * dist);
            sierpC (level - 1);
            lib.DrawFrame.lineTo(0 - dist, 0 - dist);
            sierpD (level - 1);
            True
        }
        else False in
{
    lib.DrawFrame.create(level, dist);
    sierpA(level);
    lib.DrawFrame.lineTo(dist, dist);
    sierpB(level);
    lib.DrawFrame.lineTo(0 - dist, dist);
    sierpC(level);
    lib.DrawFrame.lineTo(0 - dist, 0 - dist);
    sierpD(level);
    lib.DrawFrame.lineTo(dist, 0 - dist);
    lib.DrawFrame.refresh();
    True
}
