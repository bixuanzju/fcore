let rec
  foldLeft[A] (f : A -> Int -> A) (v : A) (xs : List[Int]) : A =
    if isNil(xs) then v
    else foldLeft [A] f (f v head(xs)) tail(xs) in
let
  inject[A, S] (a : A) : S -> (A, S) = \(s : S) -> (a, s)
and
  bind[A, B, S] (c : S -> (A, S)) (f : A -> (S -> (B, S))) : S -> (B, S) =
    \(st : S) -> (let n = c st in f n._1 n._2)
and
  get[S] (s : S) = (s, s)
and
  put[S] (s : S) = \(dummy : S) -> ((), s)
in
let
  rindex (as : List[Int]) : List[Int] =
    let
      gao (acc : Int -> (List[Int], Int)) (a : Int) : Int -> (List[Int], Int) =
        bind [List[Int], List[Int], Int]
          acc
          (\(xs : List[Int]) ->
            (bind [Int, List[Int], Int]
               (get [Int])
               (\(n : Int) ->
                 (bind [Unit, List[Int], Int]
                    (put [Int] (n + 1))
                    (\(s : Unit) -> (inject [List[Int], Int] (cons(a, xs))))))))
    in
    let
      foldLeft' (as : List[Int]) : Int -> (List[Int], Int) =
        foldLeft [Int -> (List[Int], Int)]
          gao
          (inject [List[Int], Int] (new List[Int]()))
          as
    in
    (foldLeft' as 0)._1
in
length(rindex (new List[Int](1,2,3,4)))
